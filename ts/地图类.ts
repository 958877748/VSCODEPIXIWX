namespace 主空间 {
    export class 地图类 extends PIXI.Container {
        地图数据: 地图数据类
        地图图集: PIXI.loaders.TextureDictionary
        地图块池: 地图块池类
        //移动地图,改变显示矩形的坐标,同时所有子类,根据矩形去显示
        //显示矩形相当于摄像机
        显示矩形: PIXI.Rectangle
        正在显示的地图块池 = {}
        左间隙:number
        上间隙:number

        constructor(地图图集: PIXI.loaders.TextureDictionary, 地图数据) {
            super()
            this.地图数据 = new 地图数据类(地图数据)
            this.地图块池 = new 地图块池类(地图图集)
            this.计算实际要显示的块多少()
            this.根据显示矩形显示所有地图块(this.显示矩形)
        }

        移动矩形(){
            //更新显示矩形
            this.显示矩形.x = -(this.x-this.左间隙)
            this.显示矩形.y = -(this.y-this.上间隙)
            //更新地图块
            this.根据显示矩形显示所有地图块(this.显示矩形)
        }

        private 根据显示矩形显示所有地图块(矩形: PIXI.Rectangle) {
            //1.拿到矩形左上角顶点坐标
            let 左上角顶点 = { x: this.显示矩形.x, y: this.显示矩形.y }
            //2.根据左上角顶点计算需显示的地图块区域
            let 地图块区域 = this.根据左上角顶点计算地图块区域(左上角顶点)
            //3.循环所有块将显示标识设置为0
            let 所有块 = this.正在显示的地图块池
            for (const 地图块标识 in 所有块) {
                if (所有块.hasOwnProperty(地图块标识)) {
                    const 地图块:地图块类 = 所有块[地图块标识]
                    地图块.显示标识 = 0
                }
            }
            //4.根据地图块区域显示所有地图块,并将显示标识设置为1
            for (let 下标x = 0; 下标x <= 地图块区域.width; 下标x++) {
                for (let 下标y = 0; 下标y <= 地图块区域.height; 下标y++) {
                    const 地图块 = this.根据地图块坐标显示地图块({ x: 地图块区域.x + 下标x, y: 地图块区域.y + 下标y })
                    地图块.显示标识 = 1
                }
            }
            //5.循环所有地图块
            所有块 = this.正在显示的地图块池
            for (const 地图块标识 in 所有块) {
                if (所有块.hasOwnProperty(地图块标识)) {
                    const 地图块:地图块类 = 所有块[地图块标识]
                    //6.将标识为0的回收至池中
                    if(地图块.显示标识 == 0){
                        delete 所有块[地图块标识]
                        this.地图块池.回收地图块(地图块)
                    }
                }
            }
        }

        private 根据地图块坐标显示地图块(坐标: { x: number, y: number }): 地图块类 {
            let 地图块: 地图块类, 地图块标识
            //1.检查需要显示的图块显示了吗?
            地图块标识 = 坐标.x + '_' + 坐标.y
            地图块 = this.正在显示的地图块池[地图块标识]
            if (地图块) {
                //2.如果显示了,不再处理
            } else {
                //3.如果没显示
                //4.取出该坐标对应的地图块数据
                let 地图块数据 = this.地图数据.根据地图块坐标取地图块数据(坐标)
                //5.很据地图块数据从池中拿出地图块对象
                地图块 = this.地图块池.获取地图块(地图块数据)
                //6.将地图块添加到地图上
                地图块.x = 坐标.x * 24
                地图块.y = 坐标.y * 24
                this.addChild(地图块)
                //7.将图块引用放入正在显示池中
                this.正在显示的地图块池[地图块标识] = 地图块
            }
            return 地图块
        }

        //计算坐标时,如果刚好在x分界线上,会被算为右边的地图块
        //计算坐标时,如果刚好在y分界线上,会被算为下边的地图块
        //计算坐标时,如果刚好在xy分界线上,会被算为右下的地图块
        //左上角顶点这样算刚好,但其他顶点就不行
        //右上角顶点,如果刚好在x分界线上,需被算为左边的地图块
        //左下角顶点,如果刚好在y分界线上,需被算为上边的地图块
        //右下角顶点,如果刚好在xy分界线上,需被算为左上的地图块
        private 根据左上角顶点计算地图块区域(顶点: { x: number, y: number }) {
            let 返回值 = new PIXI.Rectangle()

            let x除数 = 顶点.x / 24
            let x余数 = 顶点.x % 24
            let y除数 = 顶点.y / 24
            let y余数 = 顶点.y % 24

            返回值.x = x余数 == 0 ? x除数 : parseInt(x除数 + '')
            返回值.y = y余数 == 0 ? y除数 : parseInt(y除数 + '')
            返回值.width = x余数 == 0 ? 5 : 6
            返回值.height = y余数 == 0 ? 10 : 11
            return 返回值
        }

        /**
         * 根据设备屏幕大小计算一次
         */
        private 计算实际要显示的块多少() {
            this.显示矩形 = new PIXI.Rectangle()

            let 舞台宽度 = 主应用.单例.设置.舞台宽度
            let 舞台高度 = 主应用.单例.设置.舞台高度
            let 图块宽度 = this.地图数据.地图块宽度
            let 图块高度 = this.地图数据.地图块高度

            let 水平多少图块 = parseInt(舞台宽度 / 图块宽度 + '')
            let 左右间隙 = 舞台宽度 % 图块宽度
            let 左间隙, 右间隙
            if ((左右间隙 % 2) == 0) {
                左间隙 = 左右间隙 / 2
                右间隙 = 左间隙
            } else {
                左间隙 = (左右间隙 - 1) / 2
                右间隙 = 左间隙 + 1
            }

            let 上间隙, 下间隙
            let 垂直多少图块 = parseInt(舞台高度 / 图块高度 + '')
            let 上下间隙 = 舞台高度 % 图块高度
            if ((上下间隙 % 2) == 0) {
                上间隙 = 上下间隙 / 2
                下间隙 = 上间隙
            } else {
                上间隙 = (上下间隙 - 1) / 2
                下间隙 = 上间隙 + 1
            }

            this.x = 左间隙
            this.y = 上间隙
            this.左间隙 = 左间隙
            this.上间隙 = 上间隙

            this.显示矩形.x = 0
            this.显示矩形.y = 0
            this.显示矩形.width = 水平多少图块 * 图块宽度
            this.显示矩形.height = 垂直多少图块 * 图块高度

            return 水平多少图块 * 垂直多少图块
        }
    }
}